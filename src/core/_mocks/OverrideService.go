// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/google/uuid"

// OverrideService is an autogenerated mock type for the OverrideService type
type OverrideService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: override
func (_m *OverrideService) Delete(override entity.Override) error {
	ret := _m.Called(override)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Override) error); ok {
		r0 = rf(override)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEntityID provides a mock function with given fields: entityID
func (_m *OverrideService) FindByEntityID(entityID uuid.UUID) (entity.Overrides, error) {
	ret := _m.Called(entityID)

	var r0 entity.Overrides
	if rf, ok := ret.Get(0).(func(uuid.UUID) entity.Overrides); ok {
		r0 = rf(entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Overrides)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(entityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: override
func (_m *OverrideService) Save(override entity.Override) error {
	ret := _m.Called(override)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Override) error); ok {
		r0 = rf(override)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
