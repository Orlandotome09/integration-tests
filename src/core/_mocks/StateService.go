// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"
import time "time"
import uuid "github.com/google/uuid"
import values "bitbucket.org/bexstech/temis-compliance/src/core/domain/values"

// StateService is an autogenerated mock type for the StateService type
type StateService struct {
	mock.Mock
}

// Create provides a mock function with given fields: entityID, engineName
func (_m *StateService) Create(entityID uuid.UUID, engineName string) (*entity.State, error) {
	ret := _m.Called(entityID, engineName)

	var r0 *entity.State
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) *entity.State); ok {
		r0 = rf(entityID, engineName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(entityID, engineName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProfileID provides a mock function with given fields: profileID, engine, result
func (_m *StateService) FindByProfileID(profileID uuid.UUID, engine string, result values.Result) ([]entity.State, error) {
	ret := _m.Called(profileID, engine, result)

	var r0 []entity.State
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, values.Result) []entity.State); ok {
		r0 = rf(profileID, engine, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, values.Result) error); ok {
		r1 = rf(profileID, engine, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: entityID
func (_m *StateService) Get(entityID uuid.UUID) (*entity.State, bool, error) {
	ret := _m.Called(entityID)

	var r0 *entity.State
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.State); ok {
		r0 = rf(entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.State)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(uuid.UUID) bool); ok {
		r1 = rf(entityID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID) error); ok {
		r2 = rf(entityID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Reprocess provides a mock function with given fields: egineName, integrationIds
func (_m *StateService) Reprocess(egineName string, integrationIds ...string) ([]string, error) {
	_va := make([]interface{}, len(integrationIds))
	for _i := range integrationIds {
		_va[_i] = integrationIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, egineName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, ...string) []string); ok {
		r0 = rf(egineName, integrationIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(egineName, integrationIds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resync provides a mock function with given fields: integrationIds
func (_m *StateService) Resync(integrationIds ...string) ([]string, error) {
	_va := make([]interface{}, len(integrationIds))
	for _i := range integrationIds {
		_va[_i] = integrationIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(...string) []string); ok {
		r0 = rf(integrationIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(integrationIds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchContractStates provides a mock function with given fields: request
func (_m *StateService) SearchContractStates(request entity.SearchProfileStateRequest) (*entity.ProfileStateList, error) {
	ret := _m.Called(request)

	var r0 *entity.ProfileStateList
	if rf, ok := ret.Get(0).(func(entity.SearchProfileStateRequest) *entity.ProfileStateList); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProfileStateList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.SearchProfileStateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProfileStates provides a mock function with given fields: request
func (_m *StateService) SearchProfileStates(request entity.SearchProfileStateRequest) (*entity.ProfileStateList, error) {
	ret := _m.Called(request)

	var r0 *entity.ProfileStateList
	if rf, ok := ret.Get(0).(func(entity.SearchProfileStateRequest) *entity.ProfileStateList); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ProfileStateList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.SearchProfileStateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: state, requestDate, executionTime
func (_m *StateService) Update(state entity.State, requestDate time.Time, executionTime time.Time) error {
	ret := _m.Called(state, requestDate, executionTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.State, time.Time, time.Time) error); ok {
		r0 = rf(state, requestDate, executionTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
