// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/google/uuid"

// DocumentFileAdapter is an autogenerated mock type for the DocumentFileAdapter type
type DocumentFileAdapter struct {
	mock.Mock
}

// FindByDocumentID provides a mock function with given fields: documentID
func (_m *DocumentFileAdapter) FindByDocumentID(documentID uuid.UUID) ([]entity.DocumentFile, error) {
	ret := _m.Called(documentID)

	var r0 []entity.DocumentFile
	if rf, ok := ret.Get(0).(func(uuid.UUID) []entity.DocumentFile); ok {
		r0 = rf(documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DocumentFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: documentFileID
func (_m *DocumentFileAdapter) Get(documentFileID uuid.UUID) (*entity.DocumentFile, error) {
	ret := _m.Called(documentFileID)

	var r0 *entity.DocumentFile
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.DocumentFile); ok {
		r0 = rf(documentFileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DocumentFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(documentFileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastTwoFilesOfDocument provides a mock function with given fields: documentID
func (_m *DocumentFileAdapter) GetLastTwoFilesOfDocument(documentID uuid.UUID) (*entity.DocumentFile, *entity.DocumentFile, error) {
	ret := _m.Called(documentID)

	var r0 *entity.DocumentFile
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.DocumentFile); ok {
		r0 = rf(documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DocumentFile)
		}
	}

	var r1 *entity.DocumentFile
	if rf, ok := ret.Get(1).(func(uuid.UUID) *entity.DocumentFile); ok {
		r1 = rf(documentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.DocumentFile)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID) error); ok {
		r2 = rf(documentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
