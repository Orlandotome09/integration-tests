// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"

// RestrictiveListsAdapter is an autogenerated mock type for the RestrictiveListsAdapter type
type RestrictiveListsAdapter struct {
	mock.Mock
}

// OccurrenceInBlackList provides a mock function with given fields: document, name
func (_m *RestrictiveListsAdapter) OccurrenceInBlackList(document string, name string) (*entity.BlacklistStatus, error) {
	ret := _m.Called(document, name)

	var r0 *entity.BlacklistStatus
	if rf, ok := ret.Get(0).(func(string, string) *entity.BlacklistStatus); ok {
		r0 = rf(document, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BlacklistStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(document, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OccurrenceInPepList provides a mock function with given fields: documentNumber
func (_m *RestrictiveListsAdapter) OccurrenceInPepList(documentNumber string) (*entity.PepInformation, error) {
	ret := _m.Called(documentNumber)

	var r0 *entity.PepInformation
	if rf, ok := ret.Get(0).(func(string) *entity.PepInformation); ok {
		r0 = rf(documentNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PepInformation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(documentNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
