// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	"bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RuleSetConfigRepository is an autogenerated mock type for the RuleSetConfigRepository type
type RuleSetConfigRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ruleSetConfig
func (_m *RuleSetConfigRepository) Create(ruleSetConfig entity.RuleSetConfig) (*entity.RuleSetConfig, error) {
	ret := _m.Called(ruleSetConfig)

	var r0 *entity.RuleSetConfig
	if rf, ok := ret.Get(0).(func(entity.RuleSetConfig) *entity.RuleSetConfig); ok {
		r0 = rf(ruleSetConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RuleSetConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.RuleSetConfig) error); ok {
		r1 = rf(ruleSetConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ruleSetConfigID
func (_m *RuleSetConfigRepository) Get(ruleSetConfigID uuid.UUID) (*entity.RuleSetConfig, error) {
	ret := _m.Called(ruleSetConfigID)

	var r0 *entity.RuleSetConfig
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entity.RuleSetConfig); ok {
		r0 = rf(ruleSetConfigID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RuleSetConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(ruleSetConfigID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ruleSetConfig
func (_m *RuleSetConfigRepository) Save(ruleSetConfig entity.RuleSetConfig) (*entity.RuleSetConfig, error) {
	ret := _m.Called(ruleSetConfig)

	var r0 *entity.RuleSetConfig
	if rf, ok := ret.Get(0).(func(entity.RuleSetConfig) *entity.RuleSetConfig); ok {
		r0 = rf(ruleSetConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RuleSetConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.RuleSetConfig) error); ok {
		r1 = rf(ruleSetConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ruleSetConfig
func (_m *RuleSetConfigRepository) Update(ruleSetConfig entity.RuleSetConfig) (*entity.RuleSetConfig, error) {
	ret := _m.Called(ruleSetConfig)

	var r0 *entity.RuleSetConfig
	if rf, ok := ret.Get(0).(func(entity.RuleSetConfig) *entity.RuleSetConfig); ok {
		r0 = rf(ruleSetConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RuleSetConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.RuleSetConfig) error); ok {
		r1 = rf(ruleSetConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
