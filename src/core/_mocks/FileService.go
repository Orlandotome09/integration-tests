// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/google/uuid"

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

// Add provides a mock function with given fields: reader, contentType
func (_m *FileService) Add(reader io.Reader, contentType string) (*uuid.UUID, error) {
	ret := _m.Called(reader, contentType)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(io.Reader, string) *uuid.UUID); ok {
		r0 = rf(reader, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, string) error); ok {
		r1 = rf(reader, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Check provides a mock function with given fields: fileID
func (_m *FileService) Check(fileID uuid.UUID) (bool, error) {
	ret := _m.Called(fileID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(fileID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrl provides a mock function with given fields: fileID
func (_m *FileService) GetUrl(fileID uuid.UUID) (string, error) {
	ret := _m.Called(fileID)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(fileID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
