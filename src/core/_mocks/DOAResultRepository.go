// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/google/uuid"

// DOAResultRepository is an autogenerated mock type for the DOAResultRepository type
type DOAResultRepository struct {
	mock.Mock
}

// Enrich provides a mock function with given fields: doaResult
func (_m *DOAResultRepository) Enrich(doaResult *entity.DOAResult) (*entity.DOAResult, error) {
	ret := _m.Called(doaResult)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*entity.DOAResult) *entity.DOAResult); ok {
		r0 = rf(doaResult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.DOAResult) error); ok {
		r1 = rf(doaResult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEntityID provides a mock function with given fields: entityID
func (_m *DOAResultRepository) FindByEntityID(entityID *uuid.UUID) ([]entity.DOAResult, error) {
	ret := _m.Called(entityID)

	var r0 []entity.DOAResult
	if rf, ok := ret.Get(0).(func(*uuid.UUID) []entity.DOAResult); ok {
		r0 = rf(entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(entityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEntityIdAndDocumentId provides a mock function with given fields: entityID, documentID
func (_m *DOAResultRepository) FindByEntityIdAndDocumentId(entityID *uuid.UUID, documentID *uuid.UUID) ([]entity.DOAResult, error) {
	ret := _m.Called(entityID, documentID)

	var r0 []entity.DOAResult
	if rf, ok := ret.Get(0).(func(*uuid.UUID, *uuid.UUID) []entity.DOAResult); ok {
		r0 = rf(entityID, documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID, *uuid.UUID) error); ok {
		r1 = rf(entityID, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastByEntityIdAndDocumentId provides a mock function with given fields: entityID, documentID
func (_m *DOAResultRepository) FindLastByEntityIdAndDocumentId(entityID *uuid.UUID, documentID *uuid.UUID) (*entity.DOAResult, error) {
	ret := _m.Called(entityID, documentID)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*uuid.UUID, *uuid.UUID) *entity.DOAResult); ok {
		r0 = rf(entityID, documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID, *uuid.UUID) error); ok {
		r1 = rf(entityID, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *DOAResultRepository) Get(id *uuid.UUID) (*entity.DOAResult, error) {
	ret := _m.Called(id)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *entity.DOAResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: doaResult
func (_m *DOAResultRepository) Save(doaResult *entity.DOAResult) (*entity.DOAResult, error) {
	ret := _m.Called(doaResult)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*entity.DOAResult) *entity.DOAResult); ok {
		r0 = rf(doaResult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.DOAResult) error); ok {
		r1 = rf(doaResult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
