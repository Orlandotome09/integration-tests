// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import contracts "bitbucket.org/bexstech/temis-compliance/src/core/useCases/doa/contracts"
import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"
import uuid "github.com/google/uuid"

// DOAService is an autogenerated mock type for the DOAService type
type DOAService struct {
	mock.Mock
}

// CreateDocMetadata provides a mock function with given fields: doaResult, documentType, docSubType, documentID, profileID
func (_m *DOAService) CreateDocMetadata(doaResult *entity.DOAResult, documentType string, docSubType string, documentID string, profileID string) *contracts.DocumentMetadata {
	ret := _m.Called(doaResult, documentType, docSubType, documentID, profileID)

	var r0 *contracts.DocumentMetadata
	if rf, ok := ret.Get(0).(func(*entity.DOAResult, string, string, string, string) *contracts.DocumentMetadata); ok {
		r0 = rf(doaResult, documentType, docSubType, documentID, profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contracts.DocumentMetadata)
		}
	}

	return r0
}

// EnrichWithScores provides a mock function with given fields: id, scores
func (_m *DOAService) EnrichWithScores(id *uuid.UUID, scores entity.Scores) (*entity.DOAResult, error) {
	ret := _m.Called(id, scores)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*uuid.UUID, entity.Scores) *entity.DOAResult); ok {
		r0 = rf(id, scores)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID, entity.Scores) error); ok {
		r1 = rf(id, scores)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastResult provides a mock function with given fields: entityID, documentID
func (_m *DOAService) FindLastResult(entityID *uuid.UUID, documentID *uuid.UUID) (*entity.DOAResult, error) {
	ret := _m.Called(entityID, documentID)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*uuid.UUID, *uuid.UUID) *entity.DOAResult); ok {
		r0 = rf(entityID, documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID, *uuid.UUID) error); ok {
		r1 = rf(entityID, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *DOAService) Get(id *uuid.UUID) (*entity.DOAResult, error) {
	ret := _m.Called(id)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *entity.DOAResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestExtraction provides a mock function with given fields: frontFile, frontFileURI, backFile, backFileURI, doc, profileID
func (_m *DOAService) RequestExtraction(frontFile *entity.DocumentFile, frontFileURI string, backFile *entity.DocumentFile, backFileURI string, doc *entity.Document, profileID uuid.UUID) (*entity.DOAExtraction, error) {
	ret := _m.Called(frontFile, frontFileURI, backFile, backFileURI, doc, profileID)

	var r0 *entity.DOAExtraction
	if rf, ok := ret.Get(0).(func(*entity.DocumentFile, string, *entity.DocumentFile, string, *entity.Document, uuid.UUID) *entity.DOAExtraction); ok {
		r0 = rf(frontFile, frontFileURI, backFile, backFileURI, doc, profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAExtraction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.DocumentFile, string, *entity.DocumentFile, string, *entity.Document, uuid.UUID) error); ok {
		r1 = rf(frontFile, frontFileURI, backFile, backFileURI, doc, profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: doaResult
func (_m *DOAService) Save(doaResult *entity.DOAResult) (*entity.DOAResult, error) {
	ret := _m.Called(doaResult)

	var r0 *entity.DOAResult
	if rf, ok := ret.Get(0).(func(*entity.DOAResult) *entity.DOAResult); ok {
		r0 = rf(doaResult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.DOAResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.DOAResult) error); ok {
		r1 = rf(doaResult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
