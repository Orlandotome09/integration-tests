// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"

// AccountAdapter is an autogenerated mock type for the AccountAdapter type
type AccountAdapter struct {
	mock.Mock
}

// CreateInternal provides a mock function with given fields: entityId, bankCode
func (_m *AccountAdapter) CreateInternal(entityId string, bankCode string) (*entity.Account, error) {
	ret := _m.Called(entityId, bankCode)

	var r0 *entity.Account
	if rf, ok := ret.Get(0).(func(string, string) *entity.Account); ok {
		r0 = rf(entityId, bankCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(entityId, bankCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProfileID provides a mock function with given fields: profileID
func (_m *AccountAdapter) FindByProfileID(profileID string) ([]entity.Account, error) {
	ret := _m.Called(profileID)

	var r0 []entity.Account
	if rf, ok := ret.Get(0).(func(string) []entity.Account); ok {
		r0 = rf(profileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(profileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: accountID
func (_m *AccountAdapter) GetByID(accountID string) (*entity.Account, error) {
	ret := _m.Called(accountID)

	var r0 *entity.Account
	if rf, ok := ret.Get(0).(func(string) *entity.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
