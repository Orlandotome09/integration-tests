// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import values "bitbucket.org/bexstech/temis-compliance/src/core/domain/values"

// OfferRepository is an autogenerated mock type for the OfferRepository type
type OfferRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: offer
func (_m *OfferRepository) Create(offer values.Offer) (*values.Offer, error) {
	ret := _m.Called(offer)

	var r0 *values.Offer
	if rf, ok := ret.Get(0).(func(values.Offer) *values.Offer); ok {
		r0 = rf(offer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.Offer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(values.Offer) error); ok {
		r1 = rf(offer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: offerType
func (_m *OfferRepository) Delete(offerType string) error {
	ret := _m.Called(offerType)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(offerType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: offerType
func (_m *OfferRepository) Get(offerType string) (*values.Offer, error) {
	ret := _m.Called(offerType)

	var r0 *values.Offer
	if rf, ok := ret.Get(0).(func(string) *values.Offer); ok {
		r0 = rf(offerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.Offer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(offerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *OfferRepository) List() ([]values.Offer, error) {
	ret := _m.Called()

	var r0 []values.Offer
	if rf, ok := ret.Get(0).(func() []values.Offer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]values.Offer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: offer
func (_m *OfferRepository) Update(offer values.Offer) (*values.Offer, error) {
	ret := _m.Called(offer)

	var r0 *values.Offer
	if rf, ok := ret.Get(0).(func(values.Offer) *values.Offer); ok {
		r0 = rf(offer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*values.Offer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(values.Offer) error); ok {
		r1 = rf(offer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
