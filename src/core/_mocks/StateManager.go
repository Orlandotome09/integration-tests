// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "bitbucket.org/bexstech/temis-compliance/src/core/domain/entity"
import mock "github.com/stretchr/testify/mock"
import time "time"
import uuid "github.com/google/uuid"

// StateManager is an autogenerated mock type for the StateManager type
type StateManager struct {
	mock.Mock
}

// GetOrCreateState provides a mock function with given fields: eventDate, entityId, engineName
func (_m *StateManager) GetOrCreateState(eventDate time.Time, entityId uuid.UUID, engineName string) (*entity.State, bool, error) {
	ret := _m.Called(eventDate, entityId, engineName)

	var r0 *entity.State
	if rf, ok := ret.Get(0).(func(time.Time, uuid.UUID, string) *entity.State); ok {
		r0 = rf(eventDate, entityId, engineName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.State)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(time.Time, uuid.UUID, string) bool); ok {
		r1 = rf(eventDate, entityId, engineName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(time.Time, uuid.UUID, string) error); ok {
		r2 = rf(eventDate, entityId, engineName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateState provides a mock function with given fields: state, requestDate, executionTime
func (_m *StateManager) UpdateState(state *entity.State, requestDate time.Time, executionTime time.Time) error {
	ret := _m.Called(state, requestDate, executionTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.State, time.Time, time.Time) error); ok {
		r0 = rf(state, requestDate, executionTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
